"use client";
import { useEffect, useState } from "react";
import { useParams } from "next/navigation";
import Image from "next/image";
import axios from "axios";
import DOMPurify from "dompurify"; // 用於清理 HTML 內容
import "./article.css";

// ArticleContent 組件：用於顯示 CKEditor 的 HTML 內容
const ArticleContent = ({ article }) => {
  const [sanitizedContent, setSanitizedContent] = useState("");

  // 當 article.content 變化時，清理 HTML 內容
  useEffect(() => {
    if (article.content) {
      const cleanedContent = DOMPurify.sanitize(article.content);
      setSanitizedContent(cleanedContent);
    }
  }, [article.content]);

  return (
    <div className="article-content-area">
      <div dangerouslySetInnerHTML={{ __html: sanitizedContent }} />
    </div>
  );
};

// ArticleDetail 組件：用於顯示文章詳情
export default function ArticleDetail() {
  const { id } = useParams(); // 從 URL 中獲取文章 ID
  const [article, setArticle] = useState(null); // 文章數據
  const [loading, setLoading] = useState(true); // 加載狀態
  const [error, setError] = useState(null); // 錯誤狀態
  const [relatedArticles, setRelatedArticles] = useState([]); // 相關文章
  const [newReply, setNewReply] = useState({ content: "", parentId: null });
  const backendURL = "http://localhost:3005";
  const defaultImage = `${backendURL}/uploads/article/no_is_main.png`; // 定義預設圖片
  const [imageUrl, setImageUrl] = useState(defaultImage); // 圖片 URL 狀態

  // 設置main-photo圖片 URL
  useEffect(() => {
    if (article && article.img_url) {
      const fullImageUrl = article.img_url.startsWith("http")
        ? article.img_url
        : `${backendURL}${article.img_url || defaultImage}`;
      setImageUrl(fullImageUrl);
    }
  }, [article]);

  // 獲取相關文章數據和初始留言
  useEffect(() => {
    const fetchData = async () => {
      try {
        const [articleRes, repliesRes] = await Promise.all([
          axios.get(`${backendURL}/api/article/${id}`),
          axios.get(`${backendURL}/api/article/reply/${id}`),
        ]);
        const articleData = articleRes.data.data;
        const formattedRelatedArticles = articleData.relatedArticles.map((article) => ({
          ...article,
          tags: article.tags ? article.tags.split(",").map((tag) => tag.trim()) : [],
        }));

        setArticle(articleData);
        setReplies(buildReplyTree(repliesRes.data));
        setRelatedArticles(formattedRelatedArticles);
        setImageUrl(
          articleData.img_url?.startsWith("http")
            ? articleData.img_url
            : `${backendURL}${articleData.img_url || defaultImage}`
        );
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, [id]);

  // 建立留言樹狀結構
  const buildReplyTree = (replies) => {
    const replyMap = {};
    const tree = [];
    replies.forEach((reply) => {
      reply.children = [];
      replyMap[reply.id] = reply;
    });
    replies.forEach((reply) => {
      if (reply.reply_number === 0) {
        tree.push(reply);
      } else {
        const parent = replyMap[reply.reply_number];
        if (parent) parent.children.push(reply);
      }
    });
    return tree;
  };

  // 渲染留言
  const renderReplies = () => {
    if (!replies.length) return <div>目前沒有留言</div>;

    return replies.map((reply) => (
      <div key={reply.id} className="reply-item">
        {/* 層級1回覆 */}
        <div className="reply1">
          <img src="../img/article/reply2.jpg" className="reply-avatar1" alt="" />
          <div className="reply-details1">
            <div className="reply-header1">
              <div>
                <span className="reply-author1">{reply.author_name}</span>
                {reply.level === "1" && <span className="popular-reply1">熱門留言</span>}
              </div>
              <div className="reply-publish-time1">{reply.created_at}</div>
            </div>
            <div className="reply-content1">{reply.content}</div>
            <div className="others-reply-area1">
              <div className="good1" onClick={() => handleLike(reply.id, true)}>
                <i className="fa-regular fa-thumbs-up"></i> {reply.likes || 0}
              </div>
              <div className="bad1" onClick={() => handleLike(reply.id, false)}>
                <i className="fa-regular fa-thumbs-down"></i> {reply.dislikes || 0}
              </div>
              <div className="others-reply1" onClick={() => setNewReply({ ...newReply, parentId: reply.id })}>
                回覆
              </div>
            </div>
            {/* 渲染子回覆 */}
            {reply.children.map((child) => (
              <div key={child.id} className="reply2">
                <img src="../img/article/reply2.jpg" className="reply-avatar2" alt="" />
                <div className="reply-details2">
                  <div className="reply-header2">
                    <span className="reply-author2">{child.author_name}</span>
                    <div className="reply-publish-time2">{child.created_at}</div>
                  </div>
                  <div className="reply-content2">{child.content}</div>
                  <div className="others-reply-area2">
                    <div className="good2" onClick={() => handleLike(child.id, true)}>
                      <i className="fa-regular fa-thumbs-up"></i> {child.likes || 0}
                    </div>
                    <div className="bad2" onClick={() => handleLike(child.id, false)}>
                      <i className="fa-regular fa-thumbs-down"></i> {child.dislikes || 0}
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    ));
  };

  // 提交新留言或回覆
  const handleSubmitReply = async () => {
    if (!newReply.content.trim()) return;

    try {
      const res = await axios.post(`${backendURL}/api/article/reply/${id}`, {
        content: newReply.content,
        parentId: newReply.parentId,
      }, {
        headers: { Authorization: `Bearer ${localStorage.getItem("token")}` }, // 假設有認證
      });
      setReplies(buildReplyTree(res.data));
      setNewReply({ content: "", parentId: null });
    } catch (error) {
      console.error("提交留言失敗：", error);
      setError("提交留言失敗");
    }
  };

  // 處理按讚/倒讚
  const handleLike = async (replyId, isLike) => {
    try {
      const res = await axios.post(
        `${backendURL}/api/article/like/reply/${replyId}`,
        { isLike, articleId: id },
        { headers: { Authorization: `Bearer ${localStorage.getItem("token")}` } }
      );
      const updatedReplies = await axios.get(`${backendURL}/api/article/reply/${id}`);
      setReplies(buildReplyTree(updatedReplies.data));
    } catch (error) {
      console.error("按讚/倒讚失敗：", error);
      setError("按讚/倒讚失敗");
    }
  };

  // 加載中顯示 Loading
  if (loading) return <div>Loading...</div>;

  // 錯誤時顯示錯誤訊息
  if (error) return <div>Error: {error}</div>;

  // 如果沒有數據，顯示提示
  if (!article) return <div>No article found</div>;

  return (
    <div className="article col-9">
      <div className="articleDetail">
        {/* 文章標題 */}
        <div className="title">
          <div className="text-area">{article.title}</div>
          <div className="author-area">
            <i className="fa-solid fa-user"></i>
            {article.author_name}
          </div>
          <div className="publish-time-area">
            <i className="fa-solid fa-calendar-days"></i>
            {article.publish_at}
          </div>
        </div>

        {/* 文章主圖 */}
        <div className="main-photo">
          <Image
            src={imageUrl}
            alt="Article Thumbnail"
            fill
            style={{ objectFit: "cover" }}
            sizes="(max-width: 768px) 100vw, 50vw"
            onError={() => setImageUrl(defaultImage)} // 若圖片加載失敗則使用預設圖片
          />
        </div>

        {/* 文章內容 */}
        {article && (
          <div className="article-content-area">
            <ArticleContent article={article} />
          </div>
        )}

        {/* 文章標籤 */}
        <div className="tag-area">
          {Array.isArray(article.tags) ? (
            article.tags.map((tag, index) => (
              <span key={index} className="tag">
                #{tag.trim()}
              </span>
            ))
          ) : (
            <span>No tags available</span>
          )}
        </div>

        {/* 留言區 */}
        <div className="replyArea">
          <div className="replyFilter">
            <div className="totalReply">共 {replies.length} 筆留言</div>
            <div className="timeSort">
              新舊排序 <i className="fa-solid fa-arrows-up-down"></i>
            </div>
          </div>
          <div className="replyArea">{renderReplies()}</div>
        </div>

        <div className="more-reply">
          <img src="../img/article/reply3.jpg" className="reply-avatar1" alt="" />
          <input
            type="text"
            className="form-control"
            placeholder={newReply.parentId ? "回覆留言..." : "留言..."}
            value={newReply.content}
            onChange={(e) => setNewReply({ ...newReply, content: e.target.value })}
            onKeyPress={(e) => e.key === "Enter" && handleSubmitReply()}
          />
          <button className="submit-reply-btn" onClick={handleSubmitReply}>
            送出
          </button>
        </div>

        <div className="button-container">
          <button className="more-btn">更多</button>
        </div>

        {/* 相關文章 */}
        <div className="related-article-area-title">相關文章</div>
        <div className="related-article-area row row-cols-1 row-cols-md-2">
          {relatedArticles.map((relatedArticle, index) => {
            const relatedImageUrl = relatedArticle.img_url?.startsWith("http")
              ? relatedArticle.img_url
              : `${backendURL}${relatedArticle.img_url || defaultImage}`;
            {
              /* relatedArticles content 去掉標籤樣式 */
            }
            const sanitizedContent = DOMPurify.sanitize(relatedArticle.content);

            return (
              <div className="related-card" key={index}>
                <div className="img-container">
                  <Image
                    className="article-list-card-photo-img"
                    src={relatedImageUrl}
                    alt="Article Thumbnail"
                    width={300}
                    height={200}
                    style={{ objectFit: "cover", objectPosition: "center" }}
                    onError={(e) => {
                      e.currentTarget.src = defaultImage;
                    }}
                  />
                </div>
                <div className="card-body">
                  <div className="card-title">{relatedArticle.title}</div>
                  <div
                    className="card-content"
                    dangerouslySetInnerHTML={{ __html: sanitizedContent }}
                  />
                  <div className="related-tag-area">
                    {Array.isArray(relatedArticle.tags) ? (
                      relatedArticle.tags.map((tag, index) => (
                        <span key={index} className="tag">
                          #{tag.trim()}
                        </span>
                      ))
                    ) : (
                      <span>No tags available</span>
                    )}
                  </div>
                  <div className="others-reply-area">
                    <div className="good1">
                      <i className="fa-regular fa-thumbs-up"></i>
                      {relatedArticle.likes_count || 0}
                    </div>
                    <div className="comment">
                      <i className="fa-regular fa-thumbs-down"></i>
                      {relatedArticle.dislikes_count || 0}
                    </div>
                    <div className="others-reply">回覆</div>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );
}
